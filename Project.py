# -*- coding: utf-8 -*-
"""DataMINING.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZIFi6nHdkYVrulUrBbLVjH_7CD9695BW

Step 1: Data Collection and Preprocessing
"""

# Mount Google Drive to access files within it.
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

#  reading the CSV file.
df = pd.read_csv('/content/drive/My Drive/FIFA22.csv')
df.head(5)

df.shape

df = df.dropna(subset=['ID'])
df = df.dropna(axis=1, how='all')  # Drop columns where all values are null

# 3. Save the cleaned DataFrame to a new CSV (optional)
df.to_csv('FIFA.csv', index=False)

df.shape

"""Does Overall rating vary by Preferred Foot?

print(df.columns)
"""

print(df.columns)

# Replace missing values in 'DefensiveAwareness' with its mean
def_awareness_mean = df['DefensiveAwareness'].mean()
df['DefensiveAwareness'] = df['DefensiveAwareness'].fillna(def_awareness_mean)

drop_columns = [
    'ID',  'Nationality', 'Special', 'Work Rate',
     'Volleys', 'Curve', 'Agility', 'Balance',
    'Jumping', 'Vision', 'SlidingTackle', 'Composure',
    'Best Position', 'Best Overall Rating', 'Release Clause'
]

df = df.drop(columns=drop_columns)

missing_values = df.isnull().sum()

print(missing_values)

"""Explaratory Data Analysis

"""

import pandas as pd
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.hist(df['Age'], bins=15, color='skyblue', edgecolor='black')
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

df.Age.mean()

foot = df['Preferred Foot'].value_counts()
foot

"""TOP 5 PLAYERS WITH HIGHEST OVERALL

"""

fifa_overall = df.sort_values(['Overall'],ascending=False)[:5]
fifa_overall[['Name','Overall','Potential','Preferred Foot','Position']].style.background_gradient(cmap='Reds')

"""TOP 5 PLAYERS WITH HIGHEST POTENTIAL"""

fifa_potential = df.sort_values(['Potential'],ascending=False)[:5]
fifa_potential[['Name','Overall','Potential','Preferred Foot','Position']].style.background_gradient(cmap='Greens')

"""top 5 highest valued players"""

df.sort_values(['Values'],ascending=False)[:5]

"""Player Position"""

import seaborn as sns

playerposition = df['Position'].value_counts().head(10)

# Plotting the bar plot
plt.figure(figsize=(15, 5))
sns.barplot(x=playerposition.index, y=playerposition.values, palette='viridis')


plt.title('Top 10 Player Positions')
plt.xlabel('Position')
plt.ylabel('Count')


plt.xticks(rotation=45, ha='right')
plt.tight_layout()

plt.show()

"""value vs position"""

# Get the top 10 positions by counting occurrences
top_10_positions = df['Position'].value_counts().head(10).index

fifa_top10 = df[df['Position'].isin(top_10_positions)]


plt.figure(figsize=(18, 10))


sns.boxplot(y=fifa_top10['Values'], x=fifa_top10['Position'], palette='Set2')


plt.xticks(rotation=45, ha='right', fontsize=12)

plt.xlabel('Position', fontsize=14)
plt.ylabel('Values', fontsize=14)
plt.title('Value Distribution by Position (Top 10)', fontsize=16)


plt.yscale('log')
plt.yticks(fontsize=12)

#used log scales for the values for the graph to be clear
plt.tight_layout()

# Show the plot
plt.show()

"""correlation"""

import seaborn as sns
import matplotlib.pyplot as plt

selected_columns = [
    'Crossing', 'Finishing', 'HeadingAccuracy', 'Values',
    'ShortPassing', 'Dribbling', 'FKAccuracy', 'LongPassing',
    'BallControl', 'Acceleration', 'SprintSpeed', 'Reactions',
    'ShotPower', 'Stamina', 'Strength', 'LongShots',
    'Aggression', 'Interceptions', 'Positioning', 'Wage'
]

# Drop rows with missing values in selected columns
corr_data = df[selected_columns].dropna()

# Compute and plot correlation matrix
plt.figure(figsize=(15, 12))
sns.heatmap(corr_data.corr(), annot=True, cmap='coolwarm', fmt=".2f", square=True, linewidths=0.5)
plt.title("Correlation Matrix with Wage", fontsize=16)
plt.tight_layout()
plt.show()

"""Positioning is a key feature in the dataset and shows a strong correlation with various other attributes such as Finishing, Dribbling, and Longshots.  So, if you want to improve as a footballer, focusing on enhancing your  positioning could be key to boosting your performance

key attributes of top 5 overal players
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from math import pi


top_5_players = df.sort_values(by='Overall', ascending=False).head(5)


attributes = ['Finishing', 'Dribbling', 'ShortPassing', 'SprintSpeed','Positioning', 'Strength']
num_vars = len(attributes)


top_5_players_normalized = top_5_players[['Name'] + attributes].set_index('Name')
top_5_players_normalized = top_5_players_normalized.apply(lambda x: (x - x.min()) / (x.max() - x.min()))


angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
angles += angles[:1]

plt.figure(figsize=(10, 10))
ax = plt.subplot(111, polar=True)


for i, player in enumerate(top_5_players_normalized.index):
    values = top_5_players_normalized.loc[player].tolist()
    values += values[:1]
    ax.plot(angles, values, label=player, linewidth=2, linestyle='solid')
    ax.fill(angles, values, alpha=0.1)

ax.set_xticks(angles[:-1])
ax.set_xticklabels(attributes, fontsize=12)
ax.set_yticklabels(["0", "0.2", "0.4", "0.6", "0.8", "1.0"], fontsize=10)
plt.title("Comparison of Top 5 Players", fontsize=16, pad=20)
plt.legend(loc='upper right', bbox_to_anchor=(1.3, 1), fontsize=12)

plt.show()

columns_to_drop = [
    'Name', 'Preferred Foot', 'International Reputation', 'Weak Foot',
    'Skill Moves', 'Position', 'Height', 'Weight',
    'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning',
    'GKReflexes', 'DefensiveAwareness'

df1 = df.drop(columns=columns_to_drop, errors='ignore')

"""Full Pipeline (Data Split, Model Training, Evaluation):"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor
from sklearn.metrics import r2_score, mean_squared_error

# Split features and target
X = df1.drop(columns=['Wage'])
y = df1['Wage']

# Drop rows with null target values
non_null_indices = y.notna()
X = X[non_null_indices]
y = y[non_null_indices]

# Separate numeric and categorical columns
numeric_features = X.select_dtypes(include=['int64', 'float64']).columns.tolist()
categorical_features = X.select_dtypes(include=['object']).columns.tolist()

# Define preprocessor
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(transformers=[
    ('num', numeric_transformer, numeric_features),
    ('cat', categorical_transformer, categorical_features)
])

# Define models
models = {
    "Linear Regression": LinearRegression(),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "XGBoost": XGBRegressor(n_estimators=100, random_state=42),
    "SVR": SVR(kernel='rbf')
}

# Train, predict, and evaluate all models
results = {}
predictions = {}

for name, model in models.items():
    pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('regressor', model)
    ])

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    pipeline.fit(X_train, y_train)
    y_pred = pipeline.predict(X_test)

    r2 = r2_score(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))

    results[name] = (r2, rmse)
    predictions[name] = (y_test, y_pred)

    print(f"\nüîç {name}")
    print("R¬≤ Score:", round(r2, 4))
    print("RMSE:", round(rmse, 2))

# Plot best model
best_model_name = max(results, key=lambda k: results[k][0])
y_test_best, y_pred_best = predictions[best_model_name]

plt.figure(figsize=(8, 6))
plt.scatter(y_test_best, y_pred_best, alpha=0.6, color='seagreen')
plt.plot([y_test_best.min(), y_test_best.max()], [y_test_best.min(), y_test_best.max()], 'r--')
plt.title(f"{best_model_name} - Actual vs Predicted Release Clause")
plt.xlabel("Actual Value")
plt.ylabel("Predicted Value")
plt.grid(True)
plt.tight_layout()
plt.show()

"""Models

Linear Regression	0.1168	201,098.58	Weak predictor, likely underfitting.

Random Forest	0.1677	195,222.51	Best so far, but still weak.


XGBoost	0.1188	200,869.60	Similar to Linear Regression.

SVR	-0.153	229,773.63	Performs worse than predicting the mean.

Feature importance
"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import SimpleImputer
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming df1 is your dataframe, and you're using the relevant columns
selected_columns = [
    'Crossing', 'Finishing', 'HeadingAccuracy', 'Values',
    'ShortPassing', 'Dribbling', 'FKAccuracy', 'LongPassing',
    'BallControl', 'Acceleration', 'SprintSpeed', 'Reactions',
    'ShotPower', 'Stamina', 'Strength', 'LongShots',
    'Aggression', 'Interceptions', 'Positioning', 'Wage'
]

# Prepare data
X = df1[selected_columns].dropna()  # Drop rows with missing values
y = X.pop('Wage')  # Remove 'Wage' from features and assign it as target variable

# Handle missing values using SimpleImputer
imputer = SimpleImputer(strategy='mean')
X_imputed = imputer.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.2, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Fit Random Forest again
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train_scaled, y_train)

# Get feature names
feature_names = X.columns  # Using original column names

# Get importances
importances = rf.feature_importances_

# Create a DataFrame for easy plotting
feature_importance_df = pd.DataFrame({
    'Feature': feature_names,
    'Importance': importances
}).sort_values(by='Importance', ascending=False)

# Plot top 20
plt.figure(figsize=(10, 8))
sns.barplot(data=feature_importance_df.head(20), x='Importance', y='Feature', palette='viridis')
plt.title("Top 20 Important Features for Predicting Wage")
plt.tight_layout()
plt.show()

"""Model Tuning (Hyperparameter Optimization)"""

from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestRegressor

# Define hyperparameters to tune
param_grid = {
    'n_estimators': [100, 200, 300],  # Number of trees in the forest
    'max_depth': [10, 20, 30, None],   # Maximum depth of trees
    'min_samples_split': [2, 5, 10],   # Minimum number of samples required to split an internal node
    'min_samples_leaf': [1, 2, 4]      # Minimum number of samples required to be at a leaf node
}

# Set up GridSearchCV with RandomForestRegressor and 5-fold cross-validation
grid_search = GridSearchCV(estimator=RandomForestRegressor(random_state=42),
                           param_grid=param_grid,
                           cv=5,           # 5-fold cross-validation
                           n_jobs=-1,      # Use all processors for speed
                           verbose=2)      # Show detailed progress

# Fit the grid search on training data
grid_search.fit(X_train_scaled, y_train)

# Display the best parameters found by GridSearchCV
print("Best Parameters:", grid_search.best_params_)

# Get the best model from GridSearchCV
best_rf_model = grid_search.best_estimator_

# Evaluate the best model on the test set
y_test_pred = best_rf_model.predict(X_test_scaled)

# Calculate R¬≤ and RMSE for the test set
from sklearn.metrics import r2_score, mean_squared_error
r2 = r2_score(y_test, y_test_pred)
rmse = mean_squared_error(y_test, y_test_pred, squared=False)

print(f"R¬≤ Score: {round(r2, 4)}")
print(f"RMSE: {round(rmse, 2)}")